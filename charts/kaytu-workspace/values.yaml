kaytu:
  envType: dev
  opensearch:
    enabled: "false"
    endpoint: ""
    ingestionPipelineEndpoint: ""
  aksOpensearch:
    enabled: "true"
  domain:
    app: example.kaytu.io
    grpc: example.kaytu.io
    grpc_external: example.kaytu.io
  docker:
    config: XXX
  aws:
    region: us-east-2
    describeRoleArn: arn:aws:iam::xxx:role/xxx
  insights:
    s3:
      accessKey: ""
      secretKey: ""
  replicaCount: 1
  octopus:
    namespace: kaytu-octopus
  workspace:
    masterAccessKey: ""
    masterSecretKey: ""
    name: dev-cluster
    size: lg
  checkup:
    worker:
      image:
        repo: akscorekaytuacr.azurecr.io/checkup-worker
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-checkup-worker:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-checkup-worker-prod:tag"}
  migrator:
    worker:
      image:
        repo: akscorekaytuacr.azurecr.io/migrator
        tag:
          dev: v0.413.11-dev # {"$imagepolicy": "flux-system:kaytu-migrator-worker:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-migrator-worker-prod:tag"}
  analytics:
    worker:
      image:
        repo: akscorekaytuacr.azurecr.io/analytics-worker
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-analytics-worker:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-analytics-worker-prod:tag"}
  describe:
    scheduler:
      image:
        repo: akscorekaytuacr.azurecr.io/describe-scheduler
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-describe-scheduler:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-describe-scheduler-prod:tag"}
    worker:
      aws:
        image:
          repo: akscorekaytuacr.azurecr.io/kaytu-aws-describer
          tag:
            dev: local-v0.57.3 # {"$imagepolicy": "flux-system:kaytu-aws-describer:tag"}
            prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-aws-describer-prod:tag"}
      azure:
        image:
          repo: akscorekaytuacr.azurecr.io/kaytu-azure-describer
          tag:
            dev: local-v0.35.22 # {"$imagepolicy": "flux-system:kaytu-azure-describer:tag"}
            prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-azure-describer-prod:tag"}
  onboard:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/onboard-service
        tag:
          dev: v0.413.11-dev # {"$imagepolicy": "flux-system:kaytu-onboard-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-onboard-service-prod:tag"}
  integration:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/integration
        tag:
          dev: v0.413.11-dev # {"$imagepolicy": "flux-system:kaytu-integration-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-integration-service-prod:tag"}
  metadata:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/metadata-service
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-metadata-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-metadata-service-prod:tag"}
  inventory:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/inventory-service
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-inventory-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-inventory-service-prod:tag"}
  compliance:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/compliance-service
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-compliance-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-compliance-service-prod:tag"}
    summarizer:
      image:
        repo: akscorekaytuacr.azurecr.io/compliance-summarizer
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-compliance-summarizer:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-compliance-summarizer-prod:tag"}
  complianceReport:
    worker:
      image:
        repo: akscorekaytuacr.azurecr.io/compliance-report-worker
        tag:
          dev: v0.413.7-dev # {"$imagepolicy": "flux-system:kaytu-compliance-report-worker:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-compliance-report-worker-prod:tag"}
  steampipe:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/steampipe-service
        tag:
          dev: v0.413.11-dev # {"$imagepolicy": "flux-system:kaytu-steampipe-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-steampipe-service-prod:tag"}
  alerting:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/alerting-service
        tag:
          dev: v0.408.0-dev # {"$imagepolicy": "flux-system:kaytu-alerting-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:kaytu-alerting-service-prod:tag"}
  esSink:
    service:
      image:
        repo: akscorekaytuacr.azurecr.io/es-sink
        tag:
          dev: v0.413.8-dev # {"$imagepolicy": "flux-system:es-sink-service:tag"}
          prod: v0.345.2-prod # {"$imagepolicy": "flux-system:es-sink-service-prod:tag"}
postgres:
  name: postgres-cluster
  replicaCount: 1
  image:
    tag: 14
    repo: postgres
  sslMode: disable
postgresql:
  architecture: replication
  readReplicas:
    replicaCount: 1
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14
    pullPolicy: Always
    debug: false
  global:
    postgresql:
      auth:
        postgresPassword: "postgres"
  primary:
    persistence:
      size: 10Gi
    configuration: |
      listen_addresses = '*'
      max_wal_senders = 10
      shared_preload_libraries = 'pg_stat_statements'
      
      max_connections = 40
      shared_buffers = 768MB
      effective_cache_size = 2304MB
      maintenance_work_mem = 384MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 500
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 4915kB
      huge_pages = off
      min_wal_size = 4GB
      max_wal_size = 16GB
    initdb:
      user: "postgres"
      password: "postgres"
      scripts:
        primary_init_script.sh: |
          #!/bin/bash
          set -e

          dt=$(date '+%d/%m/%Y %H:%M:%S');
          echo "$dt - Running init script the 1st time Primary PostgreSql container is created...";

          exporterUserName="postgres_exporter"
          steampipeUserName="steampipe_user"

          migratorDatabaseName="migrator"
          migratorUserName="migrator_worker"

          describeDatabaseName="describe"
          describeUserName="describe_scheduler"

          assistantDatabaseName="assistant"
          assistantUserName="assistant_service"

          onboardDatabaseName="onboard"
          onboardUserName="onboard_service"

          policyDatabaseName="policy"
          policyUserName="policy_service"

          inventoryDatabaseName="inventory"
          inventoryUserName="inventory_service"

          complianceDatabaseName="compliance"
          complianceUserName="compliance_service"

          authDatabaseName="auth"
          authUserName="auth_service"

          metadataDatabaseName="metadata"
          metadataUserName="metadata_service"

          reporterDatabaseName="reporter"
          reporterUserName="reporter_service"

          alertingDatabaseName="alerting"
          alertingUserName="alerting_service"

          echo "$dt - Running: psql -v ON_ERROR_STOP=1 --username postgres --dbname postgres ...";

          PGPASSWORD="postgres" psql -v ON_ERROR_STOP=1 --username "postgres" --dbname "postgres" <<-EOSQL

          CREATE DATABASE $describeDatabaseName;
          CREATE USER $describeUserName WITH PASSWORD '$POSTGRES_DESCRIBE_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$describeDatabaseName" to $describeUserName;

          \c $describeDatabaseName
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $onboardDatabaseName;
          CREATE USER $onboardUserName WITH PASSWORD '$POSTGRES_ONBOARD_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$onboardDatabaseName" to $onboardUserName;

          \c $onboardDatabaseName
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $policyDatabaseName;
          CREATE USER $policyUserName WITH PASSWORD '$POSTGRES_POLICY_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$policyDatabaseName" to $policyUserName;

          \c $policyDatabaseName
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $inventoryDatabaseName ;
          CREATE USER $inventoryUserName WITH PASSWORD '$POSTGRES_INVENTORY_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$inventoryDatabaseName" to $inventoryUserName;

          \c $inventoryDatabaseName
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $assistantDatabaseName ;
          CREATE USER $assistantUserName WITH PASSWORD '$POSTGRES_ASSISTANT_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$assistantDatabaseName" to $assistantUserName;

          \c $assistantDatabaseName
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $complianceDatabaseName ;
          CREATE USER $complianceUserName WITH PASSWORD '$POSTGRES_COMPLIANCE_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$complianceDatabaseName" to $complianceUserName;

          \c $complianceDatabaseName
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $authDatabaseName;
          CREATE USER $authUserName WITH PASSWORD '$POSTGRES_AUTH_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$authDatabaseName" to $authUserName;

          \c "$authDatabaseName"
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $metadataDatabaseName;
          CREATE USER $metadataUserName WITH PASSWORD '$POSTGRES_METADATA_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$metadataDatabaseName" to $metadataUserName;

          \c "$metadataDatabaseName"
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $reporterDatabaseName;
          CREATE USER $reporterUserName WITH PASSWORD '$POSTGRES_REPORTER_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$reporterDatabaseName" to $reporterUserName;

          \c "$reporterDatabaseName"
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $alertingDatabaseName;
          CREATE USER $alertingUserName WITH PASSWORD '$POSTGRES_ALERTING_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$alertingDatabaseName" to $alertingUserName;

          \c "$alertingDatabaseName"
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE DATABASE $migratorDatabaseName;
          CREATE USER $migratorUserName WITH PASSWORD '$POSTGRES_MIGRATOR_DB_PASSWORD';
          GRANT ALL PRIVILEGES ON DATABASE "$migratorDatabaseName" to $migratorUserName;

          \c "$migratorDatabaseName"
          CREATE EXTENSION "uuid-ossp" WITH SCHEMA public;
          CREATE EXTENSION citext;

          CREATE USER $steampipeUserName WITH PASSWORD '$POSTGRES_STEAMPIPE_USER_PASSWORD';

          \connect "$complianceDatabaseName";
          GRANT pg_read_all_data TO $migratorUserName;
          GRANT pg_write_all_data TO $migratorUserName;
          \connect "$metadataDatabaseName";
          GRANT pg_read_all_data TO $migratorUserName;
          GRANT pg_write_all_data TO $migratorUserName;
          \connect "$onboardDatabaseName";
          GRANT pg_read_all_data TO $migratorUserName;
          GRANT pg_write_all_data TO $migratorUserName;
          GRANT pg_read_all_data TO $steampipeUserName;
          \connect "$inventoryDatabaseName";
          GRANT pg_read_all_data TO $migratorUserName;
          GRANT pg_write_all_data TO $migratorUserName;
          GRANT pg_read_all_data TO $steampipeUserName;


          \connect "postgres";
          CREATE EXTENSION pg_stat_statements;
          CREATE USER $exporterUserName WITH PASSWORD '$POSTGRES_EXPORTER_PASSWORD';
          GRANT pg_monitor TO $exporterUserName;

          EOSQL

          echo "$dt - Init script is completed";
    resources:
      limits:
        memory: "3Gi"
        cpu: "3"
      requests:
        memory: "1.5Gi"
        cpu: "1"
    extraEnvVars:
      - name : POSTGRES_DESCRIBE_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: describeSchedulerUserPassword
      - name : POSTGRES_ONBOARD_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: onboardServiceUserPassword
      - name : POSTGRES_POLICY_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: policyServiceUserPassword
      - name: POSTGRES_INVENTORY_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: inventoryServiceUserPassword
      - name: POSTGRES_ASSISTANT_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: assistantServiceUserPassword
      - name: POSTGRES_COMPLIANCE_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: complianceServiceUserPassword
      - name: POSTGRES_AUTH_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: authServiceUserPassword
      - name: POSTGRES_METADATA_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: metadataServiceUserPassword
      - name: POSTGRES_REPORTER_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: reporterServiceUserPassword
      - name: POSTGRES_MIGRATOR_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: migratorServiceUserPassword
      - name: POSTGRES_EXPORTER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: postgresExporterUserPassword
      - name: POSTGRES_STEAMPIPE_USER_PASSWORD
        valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: steampipeUserPassword
      - name: POSTGRES_ALERTING_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: alertingServiceUserPassword
opensearch:
  clusterName: opensearch-cluster
  persistence:
    size: 50Gi
  opensearchJavaOpts: "-XX:-HeapDumpOnOutOfMemoryError -Xmx5120M -Xms5120M"
  resources:
  requests:
    cpu: "1000m"
    memory: "6Gi"
  replicas: 3
  extraEnvs:
    - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
      value: myStrongPassword@123!
    - name: AWS_REGION
      value: "us-east-2"
opensearch-dashboards:
  replicaCount: 1
  image:
    repository: "opensearchproject/opensearch-dashboards"
    tag: "2.11.1"
    pullPolicy: "IfNotPresent"
  resources:
    requests:
      memory: "500Mi"
      cpu: "200m"
    limits:
      memory: "500Mi"
      cpu: "200m"
nats:
  global:
    labels:
      app: job-queue
  natsBox:
    enabled: false
  config:
    cluster:
      noAdvertise: true
      enabled: false
      replicas: 1
    gateway:
      enabled: false
    jetstream:
      enabled: true
      memoryStore:
        enabled: true
        maxSize: 4Gi
      # we are using jetstream as our job queue, because of that
      # there is no need to have a persistent storage.
      fileStore:
        enabled: true
        storageDirectory: /data
        pvc:
          enabled: true
          size: 25Gi
  container:
    merge:
      resources:
        requests:
          cpu: 200m
          memory: 200Mi
        limits:
          cpu: 2500m
          memory: 5Gi
  statefulSet:
    merge:
      metadata:
        annotations:
          "karpenter.sh/do-not-disrupt": "true"
  promExporter:
    enabled: true
    podMonitor:
      enabled: false
elasticsearch:
  name: elasticsearch-cluster
  version: 7.15.1
  replicaCount: 2
jaeger:
  name: jaeger-cluster
redis:
  replicaCount: 1
  name: redis
cache:
  replicaCount: 1
  name: cache
zookeeper:
  replicaCount: 1
connect:
  image:
    repo: akscorekaytuacr.azurecr.io/kafka-connect
    tag: 0.1.6
  version: 3.3.2
  replicaCount: 5
  name: kafka-connect-cluster
connectKaytuResources:
  version: 3.3.2
  replicaCount: 1
  name: kafka-connect-kaytu-resources
kafkaTopics:
  resources: cloud-resources
  kaytuResources: kaytu-resources
vault:
  provider: aws-kms
  aws:
    region: us-east-2
    roleArn: "arn:aws:iam::xxx:role/xxx"
    accessKey: ""
    secretKey: ""
  azure:
    baseUrl: ""
    tenantId: ""
    clientId: ""
    clientSecret: ""
  keyID: "workspace-key"
flux:
  namespace: flux-system
aws:
  accountID: "xxx"
  describer:
    accessRoleArn: "arn:aws:iam::xxx:role/xxx"
azure:
  aks:
    premiumStorageClassName: "managed-csi-premium"
  eventhubConnection: ""
  serviceBusConnection: ""
vault-helm: {}
github:
  token: ""
lambda: "https://xxx.execute-api.us-east-2.amazonaws.com/dev/describer"
storage:
  className: ""

keda:
  enabled: true

