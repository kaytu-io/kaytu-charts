{{- if eq .Release.Namespace "disable-ws-461045852610243491" }}
{{- range untilStep 1 21 1 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats-load-job-{{ . }}
  namespace: ws-461045852610243491
  labels:
    app.kubernetes.io/name: nats-load-job-{{ . }}
    app.kubernetes.io/instance: nats-load-job-{{ . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nats-load-job-{{ . }}
  template:
    metadata:
      labels:
        app: nats-load-job-{{ . }}
    spec:
      containers:
        - name: nats-load-job
          image: python:3.12-bullseye
          env:
            - name: SUBJECT_NUMBER
              value: "{{ . }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install nats-py
              python - <<END
              import os
              import time
              import random, string
              import asyncio
              import nats

              streamName = "load-test-stream"
              baseSubjectName = "load-test-subject-"
              subjectNames = []

              for i in range(100):
                subjectNames.append(baseSubjectName + str(i))


              async def main():
                print("Connecting to NATS", flush=True)
                nc = await nats.connect("ws-461045852610243491-nats-ws-461045852610243491-headless.ws-461045852610243491.svc.cluster.local")
                #nc = await nats.connect("localhost")
                print("Connected to NATS", flush=True)

                mySubjectNumber = os.getenv('SUBJECT_NUMBER')
                mySubject = baseSubjectName + mySubjectNumber
                print("My subject is " + mySubject, flush=True)

                # Create JetStream context.
                print("Creating JetStream context", flush=True)
                js = nc.jetstream()
                print("JetStream context created", flush=True)

                if mySubjectNumber == "1":
                  try:
                    print("Deleting old stream")
                    await js.delete_stream(streamName)
                    print("Stream deleted", flush=True)
                  except Exception as e:
                    print("ignoring error while deleting stream", flush=True)
                    print(e, flush=True)
                    pass
                  try:
                    print("Creating new stream")
                    await js.add_stream(name=streamName, subjects=subjectNames, max_msgs=10000000, storage="memory")
                    print("Stream created", flush=True)
                  except Exception as e:
                    print("ignoring error while creating stream", flush=True)
                    print(e, flush=True)
                    pass

                time.sleep(5)
                choices = string.digits + string.ascii_letters
                while True:
                  msg = ''.join(random.choices(choices, k=16))
                  try:
                    ack = await js.publish(mySubject, msg.encode())
                    print(ack)
                  except Exception as e:
                    print(e, flush=True)
                    time.sleep(10)
                    continue

              print("Starting main " + __name__, flush=True)
              if __name__ == '__main__':
                asyncio.run(main())
              END
{{- end }}
{{- end }}